/**
 * lucide-react-native v0.288.0 - ISC
 */

import { forwardRef, createElement } from 'react';
import PropTypes from 'prop-types';
import * as NativeSvg from 'react-native-svg';
import defaultAttributes, { childDefaultAttributes } from './defaultAttributes.js';

const createLucideIcon = (iconName, iconNode) => {
  const Component = forwardRef(
    ({ color = "currentColor", size = 24, strokeWidth = 2, absoluteStrokeWidth, children, "data-testid": dataTestId, ...rest }, ref) => {
      const customAttrs = {
        stroke: color,
        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,
        ...rest
      };
      return createElement(
        NativeSvg.Svg,
        {
          ref,
          ...defaultAttributes,
          width: size,
          height: size,
          "data-testid": dataTestId,
          ...customAttrs
        },
        [
          ...iconNode.map(([tag, attrs]) => {
            const upperCasedTag = tag.charAt(0).toUpperCase() + tag.slice(1);
            return createElement(
              NativeSvg[upperCasedTag],
              { ...childDefaultAttributes, ...customAttrs, ...attrs }
            );
          }),
          ...(Array.isArray(children) ? children : [children]) || []
        ]
      );
    }
  );
  Component.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    strokeWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
  };
  Component.displayName = `${iconName}`;
  return Component;
};

export { createLucideIcon as default };
//# sourceMappingURL=createLucideIcon.js.map
